/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int sum = l1.val + l2.val;                      // Invariant: sum is the sum of all components of current digit
        int increment = sum >= 10 ? 1 : 0;              // Invariant: increment is the digit on the tenth position of sum
        ListNode result = new ListNode(sum % 10);       // Invariant: sum % 10 is the last digit of sum

        ListNode curr1 = l1.next;
        ListNode curr2 = l2.next;
        ListNode curr3 = result;

        // Pre: curr1 and curr2 both are non-null
        while (curr1 != null && curr2 != null) {
            sum = increment + curr1.val + curr2.val;
            curr1 = curr1.next;
            curr2 = curr2.next;

            increment = sum >= 10 ? 1 : 0;
            curr3.next = new ListNode(sum % 10);
            curr3 = curr3.next;
        }
        // Post: none or one of curr1 and curr2 is null

        ListNode rest = curr1 == null ? curr2 : curr1;
        // Pre: rest can be either null or non-null
        while (rest != null) {
            sum = rest.val + increment;
            rest = rest.next;

            increment = sum >= 10? 1 : 0;
            curr3.next = new ListNode(sum % 10);
            curr3 = curr3.next;
        }
        // Post: rest must be null

        // Fencepost condition
        if (increment == 1) {
            curr3.next = new ListNode(1);
        }

        return result;
    }
}